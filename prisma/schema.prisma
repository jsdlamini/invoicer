// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 

 
model User {
  id            String    @id @default(cuid())
  firstName          String?
  lastName          String?
  address          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[] 

  invoices Invoice[]   

  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now()) 

  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
  }

  model Invoice {
    id String @id @default(uuid())
    invoiceName String 
    total Int 
    status InvoiceStatus 
    date DateTime 
    dueDate Int
    fromName String 
    fromEmail String
    fromAddress String
    clientName String 
    clientEmail String
    clientAddress String
    currency String 
    invoiceNumber Int 
    note String?

    invoiceItemDescription String 
    invoiceItemQuantity Int 
    invoiceItemRate Int 

    createdAt DateTime @default(now()) 
    updatedAt DateTime @default(now()) 


    User  User? @relation(fields: [userId], references: [id])
    userId String?



  }

enum InvoiceStatus {
  PAID 
  PENDING
}